# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2017-04-12 18:16
from __future__ import unicode_literals

from django.db import migrations

from complaints.models import MWOT, WC
from census.models import Zip

import requests

### START CONFIG ###
var_descs = {
        'B03002_001E': {'header': 'race total pop'},
        'B03002_003E': {'header': 'white'},
        'B03002_004E': {'header': 'black'},
        'B03002_012E': {'header': 'hisp'},

        'B05012_001E': {'header': 'nativity total pop'},
        'B05012_003E': {'header': 'foreign born'},

        'B17001_001E': {'header': 'poverty total'},
        'B17001_002E': {'header': 'poverty count'}
              }
### END CONFIG ###


def delete_old_zips(apps,schema_editor):
    for z in Zip.objects.all():
        z.delete()

def build_req_url():
    return 'http://api.census.gov/data/2015/acs5/?get=NAME,' + ','.join(x for x in var_descs) + '&for=zip+code+tabulation+area:*&key=d182265a1eea731fd4de2ef89b9f2f0163c95822'

def req_census_data(url):
    return requests.Session().get(url)

def filter_zips(zips,data):
    filtered = []
    filtered.append(data[0])
    filtered.append([x for x in data if x[-1] in zips])
    return filtered

def make_data_dicts(data):
    headers = data[0]
    # get list index for each header var
    for var in var_descs:
        var_descs[var]['index'] = headers.index(var)
    data_dicts = []
    for record in data[1]: # skip header
        # zip code is always last right??
        data_dict = {'zip_code':record[-1]}
        for var in var_descs:
            # header and value pairs for each record
            data_dict[var_descs[var]['header']] = record[var_descs[var]['index']]
        data_dicts.append(data_dict)
    return data_dicts


def div_and_round(num,den):
    if num and den:
        try:
            return int(round(float(num)/float(den)*100))
        except Exception, e:
            print e
            import ipdb; ipdb.set_trace()
    else:
        return None

def add_zip_objs(apps,schema_editor):
    cases = [x for x in MWOT.objects.all()] + [y for y in WC.objects.all()]
    zips = set([z.claimant_zip_code for z in cases])

    url = build_req_url()
    response = req_census_data(url)
    filtered_response = filter_zips(zips,response.json())
    data_dicts = make_data_dicts(filtered_response)
    import pprint
    for dd in data_dicts:
        pprint.pprint(dd)
        z = Zip.objects.create(
                               zip_code = dd['zip_code'],

                               pct_hisp = div_and_round(dd['hisp'],dd['race total pop']),
                               pct_blk = div_and_round(dd['black'],dd['race total pop']),
                               pct_white = div_and_round(dd['white'],dd['race total pop']),

                               pct_frn_born = div_and_round(dd['foreign born'],dd['nativity total pop']),
                               
                               pct_poverty = div_and_round(dd['poverty count'],dd['poverty total']),
                              )
        z.save()


def link_zip_comps(apps,schema_editor):
    for case in [x for x in MWOT.objects.all()] + [y for y in WC.objects.all()]:
        zip_filter = Zip.objects.filter(zip_code=case.claimant_zip_code)
        if len(zip_filter) == 1:
            z = zip_filter[0]
            case.claimant_zip_data = z
            case.save()


class Migration(migrations.Migration):

    dependencies = [
        ('complaints', '0001_initial'),
        ('complaints', '0002_auto_20170411_1658'),
        ('census','0001_initial')
    ]

    operations = [
            migrations.RunPython(delete_old_zips),
            migrations.RunPython(add_zip_objs),
            migrations.RunPython(link_zip_comps),
    ]
