# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2017-04-11 16:58
from __future__ import unicode_literals
from django.db import migrations
from wagecomplaints.settings import BASE_DIR
from tcr_tools.typify import parse_str_date, floatify
from complaints.models import MWOT, WC, Hearing 
import csv


### START CONFIG ###
data_dir            = BASE_DIR + '/data/'
mwot_file_path      = data_dir + 'mwot.csv'
mwot_open_file_path = data_dir + 'mwot_open.csv'
wc_file_path        = data_dir + 'wc.csv'
wc_open_file_path   = data_dir + 'wc_open.csv'
hearings_file_path  = data_dir + 'hearings.csv'
### END CONFIG ###


mwots      = [x for x in csv.DictReader(open(mwot_file_path))]
mwot_opens = [x for x in csv.DictReader(open(mwot_open_file_path))]
wcs        = [x for x in csv.DictReader(open(wc_file_path))]
wc_opens   = [x for x in csv.DictReader(open(wc_open_file_path))]
hearings   = [x for x in csv.DictReader(open(hearings_file_path))]


def destroy_cases(apps,schema_editor):
    """
    idempotency
    """
    for x in list(Hearing.objects.all()) + list(MWOT.objects.all()) + list(WC.objects.all()):
        x.delete()


def zipify(zc):
    """
    we want 5-digit zip codes
    """
    if zc and len(zc) >= 5:
        return zc[0:5]


def load_cases(apps,schema_editor):
    """
    open and closed
    mwots and wcs,
    plus hearings
    """
    for row in mwots:
        mwot = MWOT.objects.create(
                                    case_no           = row['Case'],
                                    case_type         = 'mwot',
                                    date_filed        = parse_str_date(row['Filed']),
                                    date_closed       = parse_str_date(row['Closed']),
                                    status            = row['Status'],
                                    claimant_zip_code = zipify(row['Claimant ZIP']),
                                    employer_zip      = zipify(row['Employer ZIP']),
                                    employer_name     = row['Employer'],
                                    industry          = row['Industry'],
                                    amt_claimed       = floatify(row['Amount Demanded']),
                                    amt_resolved      = floatify(row['Amount Resolved']),
                                   )
        mwot.save()

    for row in mwot_opens:
        mwot_open = MWOT.objects.create(
                                        status     = row['Status'],
                                        date_filed = parse_str_date(row['Filed']),
                                        claim_type = row['Claim Type']
                                       )
        mwot_open.save()

    for row in wcs:
        wc = WC.objects.create(
                                case_no       = row['Case'],
                                case_type     = 'wc',
                                date_filed    = parse_str_date(row['Claim Received']),
                                date_closed   = parse_str_date(row['Closed']),
                                status        = row['Status'],
                                claimant_zip_code = zipify(row['Claimant ZIP']),
                                employer_zip  = zipify(row['Employer ZIP']),
                                employer_name = row['Employer'],
                                industry      = row['Industry'],
                                amt_claimed   = floatify(row['Total']),
                                union_local   = row['Union Local'],
                                union_name    = row['Union Name'],
                                translation   = row['Translation Needed For Hearing'],
                                wages         = floatify(row['Wages']),
                                bonus         = floatify(row['Bonus']),
                                commission    = floatify(row['Commission']),
                                deductions    = floatify(row['Deductions']),
                                vacation      = floatify(row['Vacation']),
                              )
        wc.save()

    for row in wc_opens:
        wc_open = WC.objects.create(
                                    status     = row['Status'],
                                    date_filed = parse_str_date(row['Claim Received'][0:10]),
                                   )
        wc_open.save()


    for row in hearings:
        wc_cases = list(WC.objects.filter(case_no = row['Case']))
        if len(wc_cases) == 1:
            wc_case = wc_cases[0]
        else:
            wc_case = None
        hearing = Hearing.objects.create(
                                         case    = wc_case,
                                         case_no = row['Case'], 
                                         date    = parse_str_date(row['Hearing Date and Time Start'][0:10]),
                                         alj     = row['ALJ']
                                        )
        hearing.save()

class Migration(migrations.Migration):

    dependencies = [
        ('complaints', '0001_initial'),
        #('census', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(destroy_cases),
        migrations.RunPython(load_cases)
    ]
